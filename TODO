TODO:
----
o Documentation
 - the README is a start.
o tests (use the Boost.Test framework)
 - the existing boost test_generator.ipp is a good start, but
   we need more:
     + increments that wrap over multiple words and that run out
     + tests of different CounterBits and verification that
       they don't overlap.
     + verification of the compile-time arithmetic on something
       other than x86_64.
     + tests like test_philox2x64.cpp for other variants, or
       some way to put more than one in a file.
     + concept checker for the counter_based_engine extensions,
       e.g., restart(), Engine(k), Engine(prf) etc.
 - test philox with and without asm mulhilo
o portability
 - implement mulhilo for some other architecture.
 - test with other compilers? (icpc seems to work)
o misc
 - a replay/decrement/rollback/backup method for counter_based_engines?
 - Jamfiles and other build infrastructure
 - really demonstrate thread-invariance in the example code (maybe C++11 std::thread)?